# Copyright (c) SenseTime. All Rights Reserved.

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals

import math

import numpy as np

from pysot.utils.bbox import corner2center, center2corner


class Anchors:
    """
    This class generate anchors.
    """
    def __init__(self, stride, ratios, scales, image_center=0, size=0):
        self.stride = stride
        self.ratios = ratios
        self.scales = scales
        self.image_center = image_center
        # size of the rpn output
        # siamrpn++: 25, siamrpn: 17
        self.size = size
        # typically, anchor_num = 5
        self.anchor_num = len(self.scales) * len(self.ratios)

        self.anchors = None

        self.generate_anchors()

    def generate_anchors(self):
        """
        generate anchors based on predefined configuration
        """
        # Generate the bbox center on (0,0),the bbox_num = anchor_num
        # anchor_num = len(anchor_ratios)*len(anchor_scales)
        self.anchors = np.zeros((self.anchor_num, 4), dtype=np.float32)
        size = self.stride * self.stride
        count = 0
        for r in self.ratios:
            ws = int(math.sqrt(size*1. / r))
            hs = int(ws * r)

            for s in self.scales:
                w = ws * s
                h = hs * s
                self.anchors[count][:] = [-w*0.5, -h*0.5, w*0.5, h*0.5][:]
                count += 1

    def generate_all_anchors(self, im_c, size):
        """
        im_c: image center
        size: image size
        """
        if self.image_center == im_c and self.size == size:
            return False
        # 127
        self.image_center = im_c
        # 25
        self.size = size
        # To calculate the position of the first anchor's
        # coordinate in the search_region.

        # The meaning of anchor.stride:The distance in the
        # search region of the corresponding adjacent anchor

        # Assuming the center of search region just is the
        # center of the feature map(generated by backbone like resnet 50),
        # the corresponding center can be calculated 
        # cx = search_region_center_coordinate -
        # floor(feature_map.shape(0)/2)*self.stride

        # the origin of the coordinate: the top left corner 
        # of the search region
        a0x = im_c - size // 2 * self.stride
        ori = np.array([a0x] * 4, dtype=np.float32)
        # zero_anchors.shape = (5,4)
        zero_anchors = self.anchors + ori
        # x1.shape = (5,1)
        x1 = zero_anchors[:, 0]
        y1 = zero_anchors[:, 1]
        x2 = zero_anchors[:, 2]
        y2 = zero_anchors[:, 3]
        #x1.shape = (5,1,1)
        x1, y1, x2, y2 = map(lambda x: x.reshape(self.anchor_num, 1, 1),
                             [x1, y1, x2, y2])
        cx, cy, w, h = corner2center([x1, y1, x2, y2])
        # disp_x.shape=(1,1,25)
        disp_x = np.arange(0, size).reshape(1, 1, -1) * self.stride
        disp_y = np.arange(0, size).reshape(1, -1, 1) * self.stride
        # cx.shape(5,1,25)
        cx = cx + disp_x
        cy = cy + disp_y

        # broadcast
        # zero.shape=(5,25,25)
        zero = np.zeros((self.anchor_num, size, size), dtype=np.float32)
        # cx.shape=(5,25,25)
        cx, cy, w, h = map(lambda x: x + zero, [cx, cy, w, h])
        x1, y1, x2, y2 = center2corner([cx, cy, w, h])

        self.all_anchors = (np.stack([x1, y1, x2, y2]).astype(np.float32),
                            np.stack([cx, cy, w,  h]).astype(np.float32))
        # all_anchors[0].shape = (4,anchor_num,W,H), the bbox coordinate(in the search region)
        # all_anchors[1].shape = (4,anchor_num,W,H),same content,but in the center format 
        return True
